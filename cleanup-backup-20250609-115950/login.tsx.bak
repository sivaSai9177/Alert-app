import { GoogleSignInButton } from "@/components/GoogleSignInButton";
import { IconSymbol } from "@/components/ui/IconSymbol";
import { ValidationIcon } from "@/components/ui/ValidationIcon";
import { Box } from "@/components/universal/Box";
import { Button } from "@/components/universal/Button";
import { Card } from "@/components/universal/Card";
import { Input } from "@/components/universal/Input";
import { TextLink } from "@/components/universal/Link";
import { HStack, VStack } from "@/components/universal/Stack";
import { Caption, Heading1, Text } from "@/components/universal/Text";
import { useAuth } from "@/hooks/useAuth";
import { showErrorAlert } from "@/lib/core/alert";
import { generateUUID } from "@/lib/core/crypto";
import { log } from "@/lib/core/logger";
import { toAppUser } from "@/lib/stores/auth-store";
import { useTheme } from "@/lib/theme/theme-provider";
import { api } from "@/lib/trpc";
import { signInSchema, type SignInInput } from "@/lib/validations/auth";
import { zodResolver } from "@hookform/resolvers/zod";
import { LinearGradient } from 'expo-linear-gradient';
import { useRouter } from 'expo-router';
import debounce from 'lodash.debounce';
import React, { useMemo, useCallback, useDeferredValue, useTransition } from "react";
import { useForm } from "react-hook-form";
import { Dimensions, KeyboardAvoidingView, Platform, Pressable, ScrollView, View } from "react-native";
import { z } from "zod";

const { width: SCREEN_WIDTH } = Dimensions.get('window');

// Memoize social icons to prevent re-creation
const getSocialIcons = () => ({
  meta: (
    <Text size="xl" colorTheme="foreground" weight="bold" style={{ fontSize: 20, fontFamily: Platform.OS === 'ios' ? 'Helvetica' : 'sans-serif' }}>f</Text> // Simplified Meta logo
  ),
  x: (
    <Text size="xl" colorTheme="foreground" weight="bold" style={{ fontSize: 20, fontFamily: Platform.OS === 'ios' ? 'Helvetica' : 'sans-serif' }}>X</Text> // X (Twitter) logo - using regular X instead of special character
  ),
});

export default function LoginScreenV2() {
  const { updateAuth, setLoading, setError } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [showPassword, setShowPassword] = React.useState(false);
  const [emailExists, setEmailExists] = React.useState<boolean | null>(null);
  const [checkingEmail, setCheckingEmail] = React.useState(false);
  const [screenWidth, setScreenWidth] = React.useState(SCREEN_WIDTH);
  const [isPending, startTransition] = useTransition();
  
  // Get social icons
  const socialIcons = React.useMemo(() => getSocialIcons(), []);
  
  // Update screen width on resize (web)
  React.useEffect(() => {
    if (Platform.OS === 'web') {
      const handleResize = () => {
        setScreenWidth(Dimensions.get('window').width);
      };
      
      const subscription = Dimensions.addEventListener('change', handleResize);
      return () => subscription?.remove();
    }
  }, []);
  
  const isTabletOrDesktop = screenWidth >= 768;
  const isLargeScreen = screenWidth >= 1024; // Only show image on larger screens
  
  // Memoize mutation callbacks to prevent recreation on every render
  const onSuccess = useCallback(async (data: any) => {
    log.auth.login('Sign in successful via tRPC', { userId: data.user?.id });
    console.log('[LOGIN] onSuccess called with data:', data);
    if (data.user && data.token) {
      // Convert user to AppUser with safe defaults
      const appUser = toAppUser(data.user, 'user');
      console.log('[LOGIN] Converted to AppUser:', appUser);

      // Update auth store with user and session
      const session = {
        id: generateUUID(),
        token: data.token,
        userId: appUser.id,
        createdAt: new Date(),
        updatedAt: new Date(),
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
      };
      console.log('[LOGIN] Updating auth store...');
      updateAuth(appUser, session);
      
      // Check if auth state updated and force navigation
      setTimeout(() => {
        const { getState } = require('@/lib/stores/auth-store').useAuthStore;
        const authState = getState();
        console.log('[LOGIN] Auth state after update:', {
          isAuthenticated: authState.isAuthenticated,
          user: authState.user?.email,
          hasHydrated: authState.hasHydrated,
        });
        
        // Force navigation if authenticated
        if (authState.isAuthenticated && authState.user) {
          console.log('[LOGIN] Auth successful, forcing navigation...');
          // Navigation will be handled by the index page redirect
          // but we can also try to push directly
          if (authState.user.needsProfileCompletion) {
            router.replace('/(auth)/complete-profile');
          } else {
            router.replace('/');
          }
        }
      }, 100);
      
      // Fix mobile session storage
      if (Platform.OS !== 'web') {
        try {
          // Store the token directly for Expo Go
          const { sessionManager } = await import('@/lib/auth/session-manager');
          await sessionManager.storeMobileToken(data.token);
          log.auth.login('Mobile token stored directly after login');
          
          // Note: postLoginFix won't work in Expo Go because Better Auth's
          // session retrieval doesn't work without proper cookie support
          // The token is already stored, so we can skip the fix
        } catch (error) {
          log.auth.error('Error storing mobile token', error);
        }
      }
    }
  }, [updateAuth]);

  const onError = useCallback((error: any) => {
    log.auth.error('Sign in failed', error);
    setError(error.message);
    showErrorAlert("Login Failed", error.message || "Failed to sign in. Please check your credentials.");
  }, [setError]);

  const onSettled = useCallback(() => {
    setLoading(false);
  }, [setLoading]);
  
  // Use tRPC mutation for sign in
  const signInMutation = api.auth.signIn.useMutation({
    onSuccess,
    onError,
    onSettled,
  });

  const form = useForm<SignInInput>({
    resolver: zodResolver(signInSchema),
    mode: "onTouched",
    reValidateMode: "onChange",
    defaultValues: {
      email: "",
      password: "",
    },
  });

  // Watch form values for button state
  const email = form.watch('email');
  const password = form.watch('password');
  
  // Use deferred value for email validation to prevent blocking UI
  const deferredEmail = useDeferredValue(email);
  
  // Email validation using Zod
  const emailSchema = z.string().email();
  const [shouldCheckEmail, setShouldCheckEmail] = React.useState(false);
  const [hasInteractedWithEmail, setHasInteractedWithEmail] = React.useState(false);
  
  // Validate email with Zod using deferred value
  const isValidEmail = useMemo(() => {
    try {
      emailSchema.parse(deferredEmail);
      return true;
    } catch {
      return false;
    }
  }, [deferredEmail]);
  
  // Only enable query when all conditions are met
  const enableQuery = shouldCheckEmail && isValidEmail && hasInteractedWithEmail;
  
  // Debug logging
  React.useEffect(() => {
    log.debug('Email validation state', 'LOGIN', {
      email,
      isValidEmail,
      shouldCheckEmail,
      touched: form.formState.touchedFields.email,
      hasInteractedWithEmail,
      enableQuery,
    });
  }, [email, isValidEmail, shouldCheckEmail, form.formState.touchedFields.email, hasInteractedWithEmail, enableQuery]);
  
  // Use the query hook with strict conditions and deferred email
  const checkEmailQuery = api.auth.checkEmailExists.useQuery(
    { email: enableQuery ? deferredEmail : 'noreply@example.com' }, // Use placeholder when disabled
    {
      enabled: enableQuery,
      retry: false,
      staleTime: 30000, // Cache for 30 seconds
      gcTime: 60000, // Keep in cache for 1 minute
      refetchOnWindowFocus: false,
      refetchOnMount: false,
      refetchOnReconnect: false,
    }
  );
  
  // Log query results
  React.useEffect(() => {
    if (checkEmailQuery.data && enableQuery) {
      const data = checkEmailQuery.data as { exists: boolean; isAvailable: boolean };
      log.debug('Email check success', 'LOGIN', { email, exists: data.exists, isAvailable: data.isAvailable });
    }
    if (checkEmailQuery.error) {
      log.error('Email check error', 'LOGIN', checkEmailQuery.error);
    }
  }, [checkEmailQuery.data, checkEmailQuery.error, email, enableQuery]);
  
  // Debounced email check - use ref to get current values
  const emailRef = React.useRef(email);
  const isValidEmailRef = React.useRef(isValidEmail);
  
  React.useEffect(() => {
    emailRef.current = email;
    isValidEmailRef.current = isValidEmail;
  }, [email, isValidEmail]);
  
  const debouncedEmailCheck = React.useMemo(
    () => debounce(() => {
      const currentEmail = emailRef.current;
      const currentIsValid = isValidEmailRef.current;
      
      log.debug('Debounce triggered', 'LOGIN', { 
        email: currentEmail, 
        isValidEmail: currentIsValid 
      });
      
      if (currentIsValid) {
        setShouldCheckEmail(true);
      }
    }, 500), // 500ms debounce delay
    []
  );
  
  // Trigger email check when email changes
  React.useEffect(() => {
    // Always reset flag when email changes
    setShouldCheckEmail(false);
    
    if (hasInteractedWithEmail && isValidEmail && email.length > 0) {
      debouncedEmailCheck();
    } else {
      debouncedEmailCheck.cancel();
    }
    
    return () => {
      debouncedEmailCheck.cancel();
    };
  }, [email, isValidEmail, hasInteractedWithEmail, debouncedEmailCheck]);
  
  // For UI consistency - properly type the data
  const emailCheckData = enableQuery && checkEmailQuery.data ? checkEmailQuery.data as { exists: boolean; isAvailable: boolean } : null;
  const isCheckingEmail = enableQuery && checkEmailQuery.isFetching;
  
  // Check if form has valid values (not just validation state)
  const hasValidValues = useMemo(() => {
    const isPasswordValid = password && password.length >= 1;
    
    return isValidEmail && isPasswordValid;
  }, [isValidEmail, password]);

  const onSubmit = useCallback(async (data: SignInInput) => {
    log.auth.debug('Starting login attempt', { email: data.email });
    
    // Trigger validation for all fields before submission
    const isValid = await form.trigger();
    
    if (!isValid) {
      log.auth.debug('Form validation errors preventing submission');
      showErrorAlert("Invalid Form", "Please fix the validation errors before submitting.");
      return;
    }
    
    startTransition(() => {
      setLoading(true);
      setError(null);
    });
    
    try {
      await signInMutation.mutateAsync({
        email: data.email,
        password: data.password,
      });
      log.auth.login('Login process completed successfully');
      
      // Navigation will be handled by Expo Router's protected routes
      
    } catch (error: any) {
      log.auth.error('Login process failed', error);
      // Clear the form password on error
      form.setValue("password", "");
    }
  }, [form, signInMutation, setLoading, setError]);

  const handleSocialAuth = (provider: 'meta' | 'x') => {
    // Placeholder for future implementation
    showErrorAlert("Coming Soon", `${provider === 'meta' ? 'Meta' : 'X'} login will be available soon!`);
  };

  const formContent = (
    <Box p={isTabletOrDesktop ? 12 : 6} flex={1}>
      <VStack spacing={6}>
        {/* Header */}
        <VStack spacing={2} alignItems="center">
          <Heading1>Welcome back</Heading1>
          <Text colorTheme="mutedForeground" style={{ textAlign: 'center' }}>
            Login to your Acme Inc account
          </Text>
        </VStack>

        {/* Form Fields */}
        <VStack spacing={3}>
          {/* Email Field */}
          <Input
            label="Email"
            placeholder="your@email.com"
            autoCapitalize="none"
            autoComplete="email"
            keyboardType="email-address"
            name="email"
            id="email"
            error={form.formState.errors.email?.message}
            success={hasInteractedWithEmail && !form.formState.errors.email && !!email && emailCheckData?.exists === true}
            value={form.watch("email")}
            onChangeText={(value) => {
              form.setValue("email", value);
              setHasInteractedWithEmail(true);
              if (form.formState.touchedFields.email) {
                form.trigger("email");
              }
            }}
            onBlur={() => {
              setHasInteractedWithEmail(true);
              form.trigger("email");
            }}
            leftElement={
              <IconSymbol 
                name="envelope.fill" 
                size={20} 
                color={theme.mutedForeground}
              />
            }
            rightElement={
              form.formState.touchedFields.email && form.watch("email") ? (
                isCheckingEmail ? (
                  <Text size="xs" colorTheme="mutedForeground">Checking...</Text>
                ) : emailCheckData ? (
                  <ValidationIcon 
                    status={
                      form.formState.errors.email ? 'error' : 
                      emailCheckData?.exists ? 'success' : 
                      'error'
                    } 
                  />
                ) : null
              ) : null
            }
          />
          
          {/* Email validation message */}
          {form.formState.touchedFields.email && !form.formState.errors.email && emailCheckData && (
            <Text size="sm" colorTheme={emailCheckData.exists ? "success" : "destructive"}>
              {emailCheckData.exists ? "Email found - please enter your password" : "Email not found - please check or sign up"}
            </Text>
          )}

          {/* Password Field */}
          <Box>
            <Text size="sm" weight="medium" colorTheme="foreground" mb={2}>
              Password
            </Text>
            <Input
              placeholder="Enter your password"
              secureTextEntry={!showPassword}
              autoComplete="current-password"
              name="password"
              id="password"
              error={form.formState.errors.password?.message}
              success={form.formState.touchedFields.password && !form.formState.errors.password && !!form.watch("password")}
              value={form.watch("password")}
              onChangeText={(value) => {
                form.setValue("password", value);
                if (form.formState.touchedFields.password) {
                  form.trigger("password");
                }
              }}
              onBlur={() => {
                form.trigger("password");
              }}
              leftElement={
                <IconSymbol 
                  name="lock.fill" 
                  size={20} 
                  color={theme.mutedForeground}
                />
              }
              rightElement={
                <Box flexDirection="row" alignItems="center" gap={2}>
                  {form.formState.touchedFields.password && form.watch("password") && (
                    <ValidationIcon 
                      status={form.formState.errors.password ? 'error' : 'success'} 
                    />
                  )}
                  <Pressable
                    onPress={() => setShowPassword(!showPassword)}
                    style={{ padding: 4 }}
                  >
                    <IconSymbol 
                      name={showPassword ? 'eye.slash.fill' : 'eye.fill' as any} 
                      size={20} 
                      color={theme.mutedForeground}
                    />
                  </Pressable>
                </Box>
              }
            />
            {/* Forgot password link */}
            <Box alignItems="flex-end" mt={2}>
              <TextLink 
                href="/(auth)/forgot-password" 
                size="sm"
                variant="primary"
              >
                Forgot your password?
              </TextLink>
            </Box>
          </Box>
        </VStack>

        {/* Submit Button */}
        <Button
          size="lg"
          fullWidth
          isDisabled={!hasValidValues || signInMutation.isPending}
          onPress={() => form.handleSubmit(onSubmit)()}
          isLoading={signInMutation.isPending}
        >
          {signInMutation.isPending ? "Signing in..." : "Login"}
        </Button>

        {/* Divider with "Or continue with" */}
        <Box position="relative" my={4}>
          <Box 
            height={1} 
            bgTheme="muted" 
            position="absolute" 
            top={10} 
            left={0} 
            right={0} 
          />
          <Box alignItems="center">
            <Box bgTheme="card" px={2}>
              <Caption colorTheme="mutedForeground">Or continue with</Caption>
            </Box>
          </Box>
        </Box>

        {/* Social Login Buttons */}
        <HStack spacing={3} justifyContent="space-between">
          <Box flex={1}>
            <GoogleSignInButton 
              size="md"
              variant="outline"
              fullWidth
              iconOnly
              text=""
              style={{ height: 44 }}
            />
          </Box>
          <Box flex={1}>
            <Button
              variant="outline"
              size="md"
              fullWidth
              onPress={() => handleSocialAuth('meta')}
              style={{ height: 44 }}
            >
              {socialIcons.meta}
            </Button>
          </Box>
          <Box flex={1}>
            <Button
              variant="outline"
              size="md"
              fullWidth
              onPress={() => handleSocialAuth('x')}
              style={{ height: 44 }}
            >
              {socialIcons.x}
            </Button>
          </Box>
        </HStack>

        {/* Register link */}
        <Box alignItems="center">
          <HStack spacing={1}>
            <Caption>Don&apos;t have an account?</Caption>
            <TextLink 
              href="/(auth)/register"
              size="sm"
              weight="medium"
              variant="primary"
            >
              Register
            </TextLink>
          </HStack>
        </Box>
      </VStack>
    </Box>
  );

  const imageColumn = (
    <LinearGradient
      colors={['#e8e9eb', '#f2f3f5', '#fafbfc']}
      start={{ x: 0, y: 0 }}
      end={{ x: 1, y: 1 }}
      style={{
        flex: 1,
        position: 'relative',
        height: '100%',
        width: '100%',
      }}
    >
      <Box
        flex={1}
        justifyContent="center"
        alignItems="center"
        p={8}
      >
        <VStack spacing={6} alignItems="center">
          {/* Rocket Emoji */}
          <Text style={{ fontSize: 80 }}>
            🚀
          </Text>
          
          {/* Minimal Text */}
          <VStack spacing={2} alignItems="center">
            <Text 
              size="3xl" 
              weight="bold" 
              style={{ color: theme.foreground }}
            >
              Welcome Back
            </Text>
            <Text 
              size="lg" 
              style={{ 
                color: theme.mutedForeground,
                textAlign: 'center',
                maxWidth: 300,
              }}
            >
              Build amazing cross-platform apps with React Native
            </Text>
          </VStack>
        </VStack>
      </Box>
    </LinearGradient>
  );

  const cardContent = (
    <Card 
      shadow="xl"
      bgTheme="card"
      borderTheme="border"
      style={{
        width: isTabletOrDesktop ? '70%' : '100%',
        maxWidth: isTabletOrDesktop ? 800 : 400,
        overflow: 'hidden',
        ...(Platform.OS === 'web' && {
          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
        }),
      }}
    >
      {isLargeScreen ? (
        <Box 
          flexDirection="row" 
          style={{ 
            minHeight: 600,
            width: '100%',
            display: 'flex' as any,
          }}
        >
          <Box flex={6} style={{ display: 'flex' as any }}>
            {formContent}
          </Box>
          <Box flex={4} style={{ display: 'flex' as any }}>
            {imageColumn}
          </Box>
        </Box>
      ) : (
        // For non-large screens, just show the form content directly
        formContent
      )}
    </Card>
  );

  const termsFooter = (
    <Box p={4} maxWidth={isTabletOrDesktop ? 800 : 400} width="100%">
      <Text size="xs" colorTheme="mutedForeground" style={{ textAlign: 'center' }}>
        By clicking continue, you agree to our{' '}
        <Text size="xs" colorTheme="foreground" style={{ textDecorationLine: 'underline' }}>
          Terms of Service
        </Text>{' '}
        and{' '}
        <Text size="xs" colorTheme="foreground" style={{ textDecorationLine: 'underline' }}>
          Privacy Policy
        </Text>
        .
      </Text>
    </Box>
  );

  const isMobile = screenWidth < 768;

  // Mobile layout - no card, full screen with native feel
  if (isMobile) {
    return (
      <Box flex={1} bgTheme="background">
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={{ flex: 1 }}
        >
          <View style={{ flex: 1 }}>
            
            {/* Scrollable Form Content */}
            <ScrollView
              style={{ flex: 1 }}
              contentContainerStyle={{
                flexGrow: 1,
                justifyContent: 'center',
                paddingVertical: 20,
              }}
              keyboardShouldPersistTaps="handled"
              showsVerticalScrollIndicator={false}
              bounces={true}
            >
              <Box flex={1} justifyContent="center">
                {/* Welcome Section with Logo */}
                <Box px={6} pb={6} alignItems="center">
                  <Box style={{ marginBottom: 16, height: 60, justifyContent: 'center', alignItems: 'center' }}>
                    <Text style={{ fontSize: 56, lineHeight: 60 }}>⭐</Text>
                  </Box>
                  <Heading1 style={{ fontSize: 32, textAlign: 'center' }}>Welcome back</Heading1>
                  <Text 
                    size="base" 
                    colorTheme="mutedForeground" 
                    style={{ textAlign: 'center', marginTop: 8 }}
                  >
                    Enter your credentials to access your account
                  </Text>
                </Box>

                {/* Form Section */}
                <VStack px={6} spacing={6} pb={4}>
                  {/* Email Field */}
                  <Box>
                    <Text size="sm" weight="medium" colorTheme="foreground" mb={2}>
                      Email
                    </Text>
                    <Input
                      placeholder="your@email.com"
                      autoCapitalize="none"
                      autoComplete="email"
                      keyboardType="email-address"
                      name="email"
                      id="email"
                      error={form.formState.errors.email?.message}
                      success={hasInteractedWithEmail && !form.formState.errors.email && !!email && emailCheckData?.exists === true}
                      value={form.watch("email")}
                      onChangeText={(value) => {
                        form.setValue("email", value);
                        setHasInteractedWithEmail(true);
                        if (form.formState.touchedFields.email) {
                          form.trigger("email");
                        }
                      }}
                      onBlur={() => {
                        setHasInteractedWithEmail(true);
                        form.trigger("email");
                      }}
                      leftElement={
                        <IconSymbol 
                          name="envelope.fill" 
                          size={20} 
                          color={theme.mutedForeground}
                        />
                      }
                      rightElement={
                        form.formState.touchedFields.email && form.watch("email") ? (
                          isCheckingEmail ? (
                            <Text size="xs" colorTheme="mutedForeground">Checking...</Text>
                          ) : emailCheckData ? (
                            <ValidationIcon 
                              status={
                                form.formState.errors.email ? 'error' : 
                                emailCheckData?.exists ? 'success' : 
                                'error'
                              } 
                            />
                          ) : null
                        ) : null
                      }
                    />
                    {form.formState.touchedFields.email && !form.formState.errors.email && emailCheckData && (
                      <Text size="sm" colorTheme={emailCheckData.exists ? "success" : "destructive"} mt={1}>
                        {emailCheckData.exists ? "Email found - please enter your password" : "Email not found - please check or sign up"}
                      </Text>
                    )}
                  </Box>

                  {/* Password Field */}
                  <Box>
                    <Text size="sm" weight="medium" colorTheme="foreground" mb={2}>
                      Password
                    </Text>
                    <Input
                      placeholder="Enter your password"
                      secureTextEntry={!showPassword}
                      autoComplete="current-password"
                      name="password"
                      id="password"
                      error={form.formState.errors.password?.message}
                      success={form.formState.touchedFields.password && !form.formState.errors.password && !!form.watch("password")}
                      value={form.watch("password")}
                      onChangeText={(value) => {
                        form.setValue("password", value);
                        if (form.formState.touchedFields.password) {
                          form.trigger("password");
                        }
                      }}
                      onBlur={() => {
                        form.trigger("password");
                      }}
                      leftElement={
                        <IconSymbol 
                          name="lock.fill" 
                          size={20} 
                          color={theme.mutedForeground}
                        />
                      }
                      rightElement={
                        <Box flexDirection="row" alignItems="center" gap={2}>
                          {form.formState.touchedFields.password && form.watch("password") && (
                            <ValidationIcon 
                              status={form.formState.errors.password ? 'error' : 'success'} 
                            />
                          )}
                          <Pressable
                            onPress={() => setShowPassword(!showPassword)}
                            style={{ padding: 4 }}
                          >
                            <IconSymbol 
                              name={showPassword ? 'eye.slash.fill' : 'eye.fill' as any} 
                              size={20} 
                              color={theme.mutedForeground}
                            />
                          </Pressable>
                        </Box>
                      }
                    />
                    {/* Forgot password link */}
                    <Box alignItems="flex-end" mt={2}>
                      <TextLink 
                        href="/(auth)/forgot-password" 
                        size="sm"
                        variant="primary"
                      >
                        Forgot your password?
                      </TextLink>
                    </Box>
                  </Box>

                  {/* Submit Button */}
                  <Button
                    size="lg"
                    fullWidth
                    isDisabled={!hasValidValues || signInMutation.isPending}
                    onPress={() => form.handleSubmit(onSubmit)()}
                    isLoading={signInMutation.isPending}
                    style={{ marginTop: 4, height: 52 }}
                  >
                    {signInMutation.isPending ? "Signing in..." : "Login"}
                  </Button>
                  {/* Divider */}
                  <Box position="relative" my={6}>
                    <Box 
                      height={1} 
                      bgTheme="muted" 
                      position="absolute" 
                      top={10} 
                      left={0} 
                      right={0} 
                    />
                    <Box alignItems="center">
                      <Box bgTheme="background" px={3}>
                        <Caption colorTheme="mutedForeground">Or continue with</Caption>
                      </Box>
                    </Box>
                  </Box>

                  {/* Social Login Buttons */}
                  <VStack spacing={3}>
                    <HStack spacing={3} justifyContent="space-between">
                      <Box flex={1}>
                        <GoogleSignInButton 
                          size="lg"
                          variant="outline"
                          fullWidth
                          iconOnly
                          text=""
                          style={{ height: 52 }}
                        />
                      </Box>
                      <Box flex={1}>
                        <Button
                          variant="outline"
                          size="lg"
                          fullWidth
                          onPress={() => handleSocialAuth('meta')}
                          style={{ height: 52 }}
                        >
                          {socialIcons.meta}
                        </Button>
                      </Box>
                      <Box flex={1}>
                        <Button
                          variant="outline"
                          size="lg"
                          fullWidth
                          onPress={() => handleSocialAuth('x')}
                          style={{ height: 52 }}
                        >
                          {socialIcons.x}
                        </Button>
                      </Box>
                    </HStack>
                    
                    {/* Register link - moved here after social buttons */}
                    <Box alignItems="center" mt={2}>
                      <HStack spacing={1}>
                        <Text size="sm" colorTheme="mutedForeground">Don&apos;t have an account?</Text>
                        <TextLink 
                          href="/(auth)/register"
                          size="sm"
                          weight="semibold"
                          variant="primary"
                        >
                          Register
                        </TextLink>
                      </HStack>
                    </Box>
                  </VStack>
                </VStack>
              </Box>
            </ScrollView>
            
            {/* Fixed Terms Footer */}
            <Box 
              px={6} 
              py={3} 
              borderTopWidth={1} 
              borderTheme="border"
              bgTheme="background"
            >
              <Text size="xs" colorTheme="mutedForeground" style={{ textAlign: 'center', lineHeight: 18 }}>
                By clicking continue, you agree to our{' '}
                <Text size="xs" colorTheme="primary" weight="medium">
                  Terms of Service
                </Text>{' '}
                and{' '}
                <Text size="xs" colorTheme="primary" weight="medium">
                  Privacy Policy
                </Text>
              </Text>
            </Box>
          </View>
        </KeyboardAvoidingView>
      </Box>
    );
  }

  if (Platform.OS === 'web') {
    return (
      <Box 
        flex={1} 
        bgTheme="muted"
        justifyContent="center"
        alignItems="center"
        px={isTabletOrDesktop ? 6 : 4}
        style={Platform.OS === 'web' ? { 
          minHeight: '100vh' as any,
          width: '100%',
        } : {
          flex: 1,
          width: '100%',
        }}
      >
        <VStack spacing={0} alignItems="center" style={{ width: '100%' }}>
          {cardContent}
          {termsFooter}
        </VStack>
      </Box>
    );
  }

  return (
    <KeyboardAvoidingView 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      style={{ flex: 1 }}
    >
      <ScrollView
        contentContainerStyle={{
          flexGrow: 1,
          justifyContent: 'center',
          alignItems: 'center',
        }}
        keyboardShouldPersistTaps="handled"
        showsVerticalScrollIndicator={false}
      >
        <Box 
          flex={1} 
          bgTheme="muted"
          justifyContent="center"
          alignItems="center"
          style={{ 
            flex: 1,
            width: '100%',
            paddingVertical: 20,
          }}
        >
          <VStack spacing={0} alignItems="center">
            {cardContent}
            {termsFooter}
          </VStack>
        </Box>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}